# Python stubs generated by omniidl from idl/selenium.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Library"
#
__name__ = "Library"
_0_Library = omniORB.openModule("Library", r"idl/selenium.idl")
_0_Library__POA = omniORB.openModule("Library__POA", r"idl/selenium.idl")


# struct Dataset
_0_Library.Dataset = omniORB.newEmptyClass()
class Dataset (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Library/Dataset:1.0"

    def __init__(self, state, recogdata, command, phase):
        self.state = state
        self.recogdata = recogdata
        self.command = command
        self.phase = phase

_0_Library.Dataset = Dataset
_0_Library._d_Dataset  = (omniORB.tcInternal.tv_struct, Dataset, Dataset._NP_RepositoryId, "Dataset", "state", (omniORB.tcInternal.tv_string,0), "recogdata", (omniORB.tcInternal.tv_wstring,0), "command", (omniORB.tcInternal.tv_string,0), "phase", (omniORB.tcInternal.tv_string,0))
_0_Library._tc_Dataset = omniORB.tcInternal.createTypeCode(_0_Library._d_Dataset)
omniORB.registerType(Dataset._NP_RepositoryId, _0_Library._d_Dataset, _0_Library._tc_Dataset)
del Dataset

# interface seleniumdata
_0_Library._d_seleniumdata = (omniORB.tcInternal.tv_objref, "IDL:Library/seleniumdata:1.0", "seleniumdata")
omniORB.typeMapping["IDL:Library/seleniumdata:1.0"] = _0_Library._d_seleniumdata
_0_Library.seleniumdata = omniORB.newEmptyClass()
class seleniumdata :
    _NP_RepositoryId = _0_Library._d_seleniumdata[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Library.seleniumdata = seleniumdata
_0_Library._tc_seleniumdata = omniORB.tcInternal.createTypeCode(_0_Library._d_seleniumdata)
omniORB.registerType(seleniumdata._NP_RepositoryId, _0_Library._d_seleniumdata, _0_Library._tc_seleniumdata)

# seleniumdata operations and attributes
seleniumdata._d_setresult = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)
seleniumdata._d_search = ((omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)
seleniumdata._d_recom = ((omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)
seleniumdata._d_certificate = ((omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)
seleniumdata._d_seleniumadditionalfunction = ((omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)

# seleniumdata object reference
class _objref_seleniumdata (CORBA.Object):
    _NP_RepositoryId = seleniumdata._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def setresult(self, *args):
        return self._obj.invoke("setresult", _0_Library.seleniumdata._d_setresult, args)

    def search(self, *args):
        return self._obj.invoke("search", _0_Library.seleniumdata._d_search, args)

    def recom(self, *args):
        return self._obj.invoke("recom", _0_Library.seleniumdata._d_recom, args)

    def certificate(self, *args):
        return self._obj.invoke("certificate", _0_Library.seleniumdata._d_certificate, args)

    def seleniumadditionalfunction(self, *args):
        return self._obj.invoke("seleniumadditionalfunction", _0_Library.seleniumdata._d_seleniumadditionalfunction, args)

omniORB.registerObjref(seleniumdata._NP_RepositoryId, _objref_seleniumdata)
_0_Library._objref_seleniumdata = _objref_seleniumdata
del seleniumdata, _objref_seleniumdata

# seleniumdata skeleton
__name__ = "Library__POA"
class seleniumdata (PortableServer.Servant):
    _NP_RepositoryId = _0_Library.seleniumdata._NP_RepositoryId


    _omni_op_d = {"setresult": _0_Library.seleniumdata._d_setresult, "search": _0_Library.seleniumdata._d_search, "recom": _0_Library.seleniumdata._d_recom, "certificate": _0_Library.seleniumdata._d_certificate, "seleniumadditionalfunction": _0_Library.seleniumdata._d_seleniumadditionalfunction}

seleniumdata._omni_skeleton = seleniumdata
_0_Library__POA.seleniumdata = seleniumdata
omniORB.registerSkeleton(seleniumdata._NP_RepositoryId, seleniumdata)
del seleniumdata
__name__ = "Library"

#
# End of module "Library"
#
__name__ = "selenium_idl"

_exported_modules = ( "Library", )

# The end.
