# Python stubs generated by omniidl from idl/select.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "Library"
#
__name__ = "Library"
_0_Library = omniORB.openModule("Library", r"idl/select.idl")
_0_Library__POA = omniORB.openModule("Library__POA", r"idl/select.idl")


# struct Dataset
_0_Library.Dataset = omniORB.newEmptyClass()
class Dataset (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Library/Dataset:1.0"

    def __init__(self, state, recogdata, command, phase):
        self.state = state
        self.recogdata = recogdata
        self.command = command
        self.phase = phase

_0_Library.Dataset = Dataset
_0_Library._d_Dataset  = (omniORB.tcInternal.tv_struct, Dataset, Dataset._NP_RepositoryId, "Dataset", "state", (omniORB.tcInternal.tv_string,0), "recogdata", (omniORB.tcInternal.tv_wstring,0), "command", (omniORB.tcInternal.tv_string,0), "phase", (omniORB.tcInternal.tv_string,0))
_0_Library._tc_Dataset = omniORB.tcInternal.createTypeCode(_0_Library._d_Dataset)
omniORB.registerType(Dataset._NP_RepositoryId, _0_Library._d_Dataset, _0_Library._tc_Dataset)
del Dataset

# interface selectdata
_0_Library._d_selectdata = (omniORB.tcInternal.tv_objref, "IDL:Library/selectdata:1.0", "selectdata")
omniORB.typeMapping["IDL:Library/selectdata:1.0"] = _0_Library._d_selectdata
_0_Library.selectdata = omniORB.newEmptyClass()
class selectdata :
    _NP_RepositoryId = _0_Library._d_selectdata[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Library.selectdata = selectdata
_0_Library._tc_selectdata = omniORB.tcInternal.createTypeCode(_0_Library._d_selectdata)
omniORB.registerType(selectdata._NP_RepositoryId, _0_Library._d_selectdata, _0_Library._tc_selectdata)

# selectdata operations and attributes
selectdata._d_setresult = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)
selectdata._d_select = ((omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), (omniORB.typeMapping["IDL:Library/Dataset:1.0"], ), None)

# selectdata object reference
class _objref_selectdata (CORBA.Object):
    _NP_RepositoryId = selectdata._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def setresult(self, *args):
        return self._obj.invoke("setresult", _0_Library.selectdata._d_setresult, args)

    def select(self, *args):
        return self._obj.invoke("select", _0_Library.selectdata._d_select, args)

omniORB.registerObjref(selectdata._NP_RepositoryId, _objref_selectdata)
_0_Library._objref_selectdata = _objref_selectdata
del selectdata, _objref_selectdata

# selectdata skeleton
__name__ = "Library__POA"
class selectdata (PortableServer.Servant):
    _NP_RepositoryId = _0_Library.selectdata._NP_RepositoryId


    _omni_op_d = {"setresult": _0_Library.selectdata._d_setresult, "select": _0_Library.selectdata._d_select}

selectdata._omni_skeleton = selectdata
_0_Library__POA.selectdata = selectdata
omniORB.registerSkeleton(selectdata._NP_RepositoryId, selectdata)
del selectdata
__name__ = "Library"

#
# End of module "Library"
#
__name__ = "select_idl"

_exported_modules = ( "Library", )

# The end.
